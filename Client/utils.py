import argparse
import requests


class Argument():
    def __init__(self, arg: str = None):

        parser = argparse.ArgumentParser()

        # use of subparsers to handle different commands
        subparsers = parser.add_subparsers(dest="command", title="command", required=True)

        # command to list all uploaded datasets
        subparsers.add_parser("list", help="List all uploaded datasets")

        # command to upload dataset
        upload = subparsers.add_parser("upload", help="Upload a file as dataset")
        upload.add_argument("--file", "-f", type=str, required=True, help="The path to the file")

        # command to get info (file name and size of dataset object)
        info = subparsers.add_parser("info", help="Get dataset info")
        info.add_argument("id", type=str, help="The ID of the dataset")

        # command to delete the dataset of an object
        delete = subparsers.add_parser("delete", help="Delete dataset of an object")
        delete.add_argument("id", type=str, help="The ID of the dataset")

        # command to export dataset as an excel file
        export = subparsers.add_parser("export", help="Export dataset as an excel file")
        export.add_argument("id", type=str, help="The ID of the dataset")

        # command to show the stats generated by running df.describe() on the pandas dataframe as a json object
        stats = subparsers.add_parser("stats", help="Show the stats of the dataset")
        stats.add_argument("id", type=str, help="The ID of the dataset")

        # command to generate and return a PDF containing a list of histograms of all the numerical columns in the dataset
        plot = subparsers.add_parser("plot", help="Generate PDF containing the list of histograms of all the num")
        plot.add_argument("id", type=str, help="The ID of the dataset")

        self.args = parser.parse_args(arg)
        self.command = self.args.command
        self.dataset_id = getattr(self.args, "id", None)
        self.file_path = getattr(self.args, "file", None)
        print(self.args)
        pass


def send_request(base_url : str = "http://localhost:8000",
                endpoint  : str = "",
                method    : str = "get",
                headers   : dict = None,
                json_body : dict = None,
                data_body : dict = None,
                files     : dict = None) -> requests.Response:
    """
    Function to send an HTTP request to a given API endpoint.
    Parameters:
        base_url (str) : URL of the server.
        endpoint (str) : API endpoint.
        method   (str) : HTTP method ('get', 'post', 'delete', 'put')
        headers  (dict): (Optional) Header to include.
        json_body(dict): (Optional) JSON body.
        data_body(dict): (Optional) Form data body.
        files    (dict): (Optional) Files to upload.
    Returns:
        requests.Response: The reponse object.
    """
    url = base_url + endpoint
    print(url)
    req_method = {
        'get' : requests.get,
        'post' : requests.post,
        'delete' : requests.delete,
        'put' : requests.put
    }
    response = req_method[method](
        url,
        headers=headers,
        json=json_body,
        data=data_body,
        files=files,
        )
    return response
